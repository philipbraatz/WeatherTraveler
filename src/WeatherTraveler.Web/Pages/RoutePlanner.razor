@page "/route-planner"
@using WeatherTraveler.Web.Services
@inject IWeatherTravelerService WeatherService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<PageTitle>üó∫Ô∏è Route Planner - Weather Traveler</PageTitle>

<div class="container-fluid main-container">
    <nav class="navbar navbar-expand-lg navbar-dark navbar-custom mb-4">
        <div class="container">
            <a class="navbar-brand" href="/">
                üå§Ô∏è Weather Traveler
            </a>
            <div class="navbar-nav ms-auto">
                <a class="nav-link" href="/">üè† Home</a>
                <a class="nav-link" href="/preferences">‚öôÔ∏è Preferences</a>
                <a class="nav-link active" href="/route-planner">üó∫Ô∏è Route Planner</a>
            </div>
        </div>
    </nav>

    <div class="container">
        <div class="row">
            <div class="col-12">
                <h1 class="display-5 mb-4">üó∫Ô∏è Weather-Aware Route Planner</h1>
                <p class="lead mb-5">Plan your perfect journey with real-time weather insights</p>
            </div>
        </div>

        <!-- Route Planning Form -->
        <div class="row mb-5">
            <div class="col-lg-8">
                <div class="weather-card">
                    <h4 class="mb-4">üìç Plan Your Route</h4>
                    
                    <!-- Waypoints -->
                    <div class="mb-4">
                        <h5>Waypoints</h5>
                        @for (int i = 0; i < waypoints.Count; i++)
                        {
                            int index = i; // Capture for lambda
                            <div class="row mb-3 align-items-center">
                                <div class="col-md-5">
                                    <label class="form-label">@GetWaypointLabel(index):</label>
                                    <input type="text" class="form-control form-control-custom" 
                                           placeholder="Enter city name or coordinates"
                                           @bind="waypoints[index].Name" @bind:event="oninput" />
                                </div>
                                <div class="col-md-3">
                                    <label class="form-label">Latitude:</label>
                                    <input type="number" class="form-control form-control-custom" 
                                           step="0.0001" placeholder="39.7392"
                                           @bind="waypoints[index].Latitude" @bind:event="oninput" />
                                </div>
                                <div class="col-md-3">
                                    <label class="form-label">Longitude:</label>
                                    <input type="number" class="form-control form-control-custom" 
                                           step="0.0001" placeholder="-104.9903"
                                           @bind="waypoints[index].Longitude" @bind:event="oninput" />
                                </div>
                                <div class="col-md-1">
                                    @if (waypoints.Count > 2)
                                    {
                                        <button type="button" class="btn btn-outline-danger btn-sm mt-4" 
                                                @onclick="() => RemoveWaypoint(index)">
                                            üóëÔ∏è
                                        </button>
                                    }
                                </div>
                            </div>
                        }
                        
                        <button type="button" class="btn btn-outline-primary" @onclick="AddWaypoint">
                            ‚ûï Add Waypoint
                        </button>
                    </div>

                    <!-- Route Options -->
                    <div class="row mb-4">
                        <div class="col-md-6">
                            <h5>üå°Ô∏è Temperature Preferences</h5>
                            <div class="row">
                                <div class="col-6">
                                    <label class="form-label">Min Temp (¬∞C):</label>
                                    <input type="number" class="form-control form-control-custom" 
                                           @bind="temperatureRange.MinCelsius" @bind:event="oninput" step="0.5" />
                                </div>
                                <div class="col-6">
                                    <label class="form-label">Max Temp (¬∞C):</label>
                                    <input type="number" class="form-control form-control-custom" 
                                           @bind="temperatureRange.MaxCelsius" @bind:event="oninput" step="0.5" />
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <h5>üåßÔ∏è Weather Options</h5>
                            <div class="form-check mb-2">
                                <input class="form-check-input" type="checkbox" id="avoidRain" @bind="avoidRain" />
                                <label class="form-check-label" for="avoidRain">
                                    Avoid rainy conditions
                                </label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="showForecast" @bind="showForecast" />
                                <label class="form-check-label" for="showForecast">
                                    Show extended forecast
                                </label>
                            </div>
                        </div>
                    </div>

                    <!-- Action Buttons -->
                    <div class="text-center">
                        <button class="btn btn-primary-custom btn-lg me-3" @onclick="PlanRoute" disabled="@isPlanning">
                            @if (isPlanning)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                <text>Planning Route...</text>
                            }
                            else
                            {
                                <text>üéØ Plan Route</text>
                            }
                        </button>
                        <button class="btn btn-outline-secondary" @onclick="LoadSampleRoute">
                            üìã Load Sample Route
                        </button>
                    </div>
                </div>
            </div>

            <!-- Quick Cities Selector -->
            <div class="col-lg-4">
                <div class="weather-card">
                    <h5 class="mb-3">üèôÔ∏è Quick City Selection</h5>
                    <p class="text-muted mb-3">Click to add major US cities to your route:</p>
                    
                    @if (majorCities.Any())
                    {
                        <div class="row">
                            @foreach (var city in majorCities.Take(12))
                            {
                                <div class="col-6 mb-2">
                                    <button class="btn btn-outline-primary btn-sm w-100" 
                                            @onclick="() => AddCityToRoute(city)">
                                        @city.Name
                                    </button>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="text-center">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading cities...</span>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Route Results -->
        @if (routeResults.Any())
        {
            <div class="row">
                <div class="col-12">
                    <h3 class="mb-4">üéØ Route Analysis Results</h3>
                </div>
            </div>

            <div class="row">
                <!-- Route Summary -->
                <div class="col-lg-4 mb-4">
                    <div class="route-card">
                        <h5>üìä Route Summary</h5>
                        <div class="mt-3">
                            <div class="d-flex justify-content-between mb-2">
                                <span>Total Distance:</span>
                                <span class="distance-badge">@totalDistance.ToString("F0") km</span>
                            </div>
                            <div class="d-flex justify-content-between mb-2">
                                <span>Waypoints:</span>
                                <span class="fw-bold">@waypoints.Count</span>
                            </div>
                            <div class="d-flex justify-content-between mb-2">
                                <span>Optimal Weather:</span>
                                <span class="status-optimal">@optimalLocations locations</span>
                            </div>
                            <div class="d-flex justify-content-between">
                                <span>Est. Travel Time:</span>
                                <span class="fw-bold">@estimatedTravelTime</span>
                            </div>
                        </div>
                          <div class="mt-4">
                            <button class="btn btn-primary-custom w-100 mb-2" @onclick="ExportRoute" disabled="@isExporting">
                                @if (isExporting)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                    <text>Exporting...</text>
                                }
                                else
                                {
                                    <text>üìÅ Export to Google Earth</text>
                                }
                            </button>                            @if (!string.IsNullOrEmpty(exportMessage))
                            {
                                <div class="alert @(exportSuccess ? "alert-success" : "alert-danger") alert-dismissible fade show" role="alert">
                                    @exportMessage
                                    <button type="button" class="btn-close" @onclick="ClearExportMessage"></button>
                                </div>
                            }
                            <button class="btn btn-outline-secondary w-100 mb-2" @onclick="TestJavaScriptInterop">
                                üß™ Test JavaScript Download
                            </button>
                            <button class="btn btn-outline-primary w-100" @onclick="ShareRoute">
                                üîó Share Route
                            </button>
                        </div>
                    </div>
                </div>

                <!-- Weather Details -->
                <div class="col-lg-8">
                    <div class="row">
                        @for (int i = 0; i < routeResults.Count; i++)
                        {
                            var result = routeResults[i];
                            <div class="col-md-6 mb-4">
                                <div class="weather-card">
                                    <div class="d-flex justify-content-between align-items-start mb-2">
                                        <h6>@GetWaypointLabel(i): @waypoints[i].Name</h6>
                                        <span class="badge @GetWeatherStatusBadge(result)">
                                            @GetWeatherStatus(result)
                                        </span>
                                    </div>
                                    
                                    <div class="d-flex align-items-center mb-3">
                                        <div class="weather-icon-large me-3">@GetWeatherIcon(result.Condition)</div>
                                        <div>
                                            <div class="temperature">@result.Temperature.ToString("F1")¬∞C</div>
                                            <div class="weather-condition">@result.Condition</div>
                                        </div>
                                    </div>
                                    
                                    <div class="small text-muted">
                                        <div class="d-flex justify-content-between">
                                            <span>üí® Wind:</span>
                                            <span>@result.WindSpeed.ToString("F1") km/h</span>
                                        </div>
                                        <div class="d-flex justify-content-between">
                                            <span>üíß Humidity:</span>
                                            <span>@result.Humidity%</span>
                                        </div>
                                        @if (i < waypoints.Count - 1)
                                        {
                                            <div class="d-flex justify-content-between mt-2 fw-bold">
                                                <span>üìè Next Segment:</span>
                                                <span>@segmentDistances[i].ToString("F0") km</span>
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@code {
    private List<WaypointInput> waypoints = new()
    {
        new WaypointInput { Name = "Denver, CO", Latitude = 39.7392, Longitude = -104.9903 },
        new WaypointInput { Name = "Las Vegas, NV", Latitude = 36.1699, Longitude = -115.1398 }
    };

    private TemperatureRange temperatureRange = new(12.0, 28.0);    private bool avoidRain = false;
    private bool showForecast = false;
    private bool isPlanning = false;
    private bool isExporting = false;

    private List<WeatherInfo> routeResults = new();
    private List<CityInfo> majorCities = new();
    private double totalDistance = 0;
    private int optimalLocations = 0;
    private string estimatedTravelTime = "0h 0m";
    private List<double> segmentDistances = new();
    
    private string exportMessage = string.Empty;
    private bool exportSuccess = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadMajorCities();
    }

    private async Task LoadMajorCities()
    {
        var coordinates = await WeatherService.GetMajorCitiesAsync();
        var cityNames = new[]
        {
            "New York", "Los Angeles", "Chicago", "Houston", "Phoenix", "Philadelphia",
            "San Antonio", "San Diego", "Dallas", "San Jose", "Austin", "Jacksonville"
        };

        majorCities = coordinates.Take(cityNames.Length)
            .Select((coord, index) => new CityInfo 
            { 
                Name = cityNames[index], 
                Coordinate = coord 
            })
            .ToList();

        StateHasChanged();
    }

    private async Task PlanRoute()
    {
        isPlanning = true;
        routeResults.Clear();
        segmentDistances.Clear();
        totalDistance = 0;
        optimalLocations = 0;

        try
        {
            var coordinates = waypoints.Select(w => new Coordinate(w.Latitude, w.Longitude)).ToList();
            
            // Get weather for each waypoint
            routeResults = await WeatherService.PlanRouteAsync(coordinates, temperatureRange);
            
            // Calculate distances
            for (int i = 0; i < coordinates.Count - 1; i++)
            {
                var distance = await WeatherService.CalculateDistanceAsync(coordinates[i], coordinates[i + 1]);
                segmentDistances.Add(distance);
                totalDistance += distance;
            }

            // Analyze optimal locations
            optimalLocations = routeResults.Count(r => 
                r.Temperature >= temperatureRange.MinCelsius && 
                r.Temperature <= temperatureRange.MaxCelsius &&
                (!avoidRain || r.Condition != WeatherCondition.Rainy));

            // Estimate travel time (rough calculation)
            var hours = (int)(totalDistance / 80); // Assuming 80 km/h average
            var minutes = (int)((totalDistance / 80 - hours) * 60);
            estimatedTravelTime = $"{hours}h {minutes}m";
        }
        catch (Exception ex)
        {
            // Handle error
            Console.WriteLine($"Error planning route: {ex.Message}");
        }
        finally
        {
            isPlanning = false;
            StateHasChanged();
        }
    }

    private void AddWaypoint()
    {
        waypoints.Add(new WaypointInput { Name = "", Latitude = 0, Longitude = 0 });
    }

    private void RemoveWaypoint(int index)
    {
        if (waypoints.Count > 2)
        {
            waypoints.RemoveAt(index);
        }
    }

    private void AddCityToRoute(CityInfo city)
    {
        waypoints.Add(new WaypointInput 
        { 
            Name = city.Name, 
            Latitude = city.Coordinate.Latitude, 
            Longitude = city.Coordinate.Longitude 
        });
    }

    private void LoadSampleRoute()
    {
        waypoints.Clear();
        waypoints.AddRange(new[]
        {
            new WaypointInput { Name = "Denver, CO", Latitude = 39.7392, Longitude = -104.9903 },
            new WaypointInput { Name = "Las Vegas, NV", Latitude = 36.1699, Longitude = -115.1398 },
            new WaypointInput { Name = "Los Angeles, CA", Latitude = 34.0522, Longitude = -118.2437 }
        });
    }    private async Task ExportRoute()
    {
        isExporting = true;
        exportMessage = string.Empty;
        
        try
        {
            Console.WriteLine("ExportRoute method called");
            
            var coordinates = waypoints.Select(w => new Coordinate(w.Latitude, w.Longitude)).ToList();
            Console.WriteLine($"Generated {coordinates.Count} coordinates");
            
            if (!coordinates.Any())
            {
                exportMessage = "‚ùå No waypoints to export. Please add some waypoints first.";
                exportSuccess = false;
                return;
            }
            
            var kml = await WeatherService.ExportRouteToKmlAsync(coordinates);
            Console.WriteLine($"KML generated, length: {kml?.Length ?? 0}");
            
            if (!string.IsNullOrEmpty(kml))
            {
                // Use the existing downloadFile JavaScript function
                var fileName = $"weather-traveler-route-{DateTime.Now:yyyy-MM-dd-HHmm}.kml";
                Console.WriteLine($"Attempting to download file: {fileName}");
                
                try
                {
                    Console.WriteLine($"About to call JSRuntime.InvokeAsync for downloadFile");
                    Console.WriteLine($"JSRuntime type: {JSRuntime?.GetType()?.Name}");
                    Console.WriteLine($"KML preview: {kml.Substring(0, Math.Min(200, kml.Length))}...");
                    
                    if (JSRuntime == null)
                    {
                        throw new InvalidOperationException("JSRuntime is not available");
                    }
                    
                    // Call downloadFile directly without timeout first
                    var success = await JSRuntime.InvokeAsync<bool>("downloadFile", fileName, kml, "application/vnd.google-earth.kml+xml");
                    Console.WriteLine($"JavaScript call completed for {fileName}, success: {success}");
                    
                    if (success)
                    {
                        exportMessage = $"‚úÖ Route exported successfully as {fileName}";
                        exportSuccess = true;
                    }
                    else
                    {
                        exportMessage = "‚ùå Download failed. Please check browser console for details.";
                        exportSuccess = false;
                    }
                }
                catch (Exception jsEx)
                {
                    Console.WriteLine($"JavaScript interop error: {jsEx.Message}");
                    Console.WriteLine($"JavaScript interop stack trace: {jsEx.StackTrace}");
                    exportMessage = $"‚ùå Download error: {jsEx.Message}";
                    exportSuccess = false;
                }
            }
            else
            {
                Console.WriteLine("Failed to generate KML export - KML is null or empty");
                exportMessage = "‚ùå Failed to generate KML export. Please try again.";
                exportSuccess = false;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error exporting route: {ex.Message}");
            Console.WriteLine($"Stack trace: {ex.StackTrace}");
            exportMessage = $"‚ùå Error exporting route: {ex.Message}";
            exportSuccess = false;
        }
        finally
        {
            isExporting = false;
            StateHasChanged();
            
            // Clear message after 5 seconds
            _ = Task.Delay(5000).ContinueWith(_ => ClearExportMessage());
        }
    }private void ClearExportMessage()
    {
        exportMessage = string.Empty;
        StateHasChanged();
    }

    private async Task TestJavaScriptInterop()
    {
        try
        {
            Console.WriteLine("=== Testing JavaScript Interop ===");
            
            // Test 1: Basic interop test
            var testResult = await JSRuntime.InvokeAsync<string>("testJavaScriptInterop");
            Console.WriteLine($"Test 1 - Basic interop: {testResult}");
            
            // Test 2: Simple download test
            var testKml = @"<?xml version=""1.0"" encoding=""UTF-8""?>
<kml xmlns=""http://www.opengis.net/kml/2.2"">
  <Document>
    <name>Test Route</name>
    <Placemark>
      <name>Test Location</name>
      <Point>
        <coordinates>-104.990300,39.739200,0</coordinates>
      </Point>
    </Placemark>
  </Document>
</kml>";
            
            Console.WriteLine($"Test 2 - About to test download with {testKml.Length} character KML");
            var downloadResult = await JSRuntime.InvokeAsync<bool>("downloadFile", "test-interop.kml", testKml, "application/vnd.google-earth.kml+xml");
            Console.WriteLine($"Test 2 - Download result: {downloadResult}");
            
            exportMessage = $"‚úÖ JavaScript interop test completed. Check console for details.";
            exportSuccess = true;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"JavaScript interop test failed: {ex.Message}");
            exportMessage = $"‚ùå JavaScript interop test failed: {ex.Message}";
            exportSuccess = false;
            StateHasChanged();
        }
    }

    private async Task ShareRoute()
    {
        try
        {
            // Simple implementation - copy route URL to clipboard
            var routeUrl = $"{NavigationManager.BaseUri}route-planner";
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", routeUrl);
            Console.WriteLine("Route URL copied to clipboard");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error sharing route: {ex.Message}");
        }
    }

    private string GetWaypointLabel(int index)
    {
        return index switch
        {
            0 => "üöÄ Start",
            _ when index == waypoints.Count - 1 => "üèÅ End",
            _ => $"üìç Stop {index}"
        };
    }

    private string GetWeatherIcon(WeatherCondition condition)
    {
        return condition switch
        {
            WeatherCondition.Sunny => "‚òÄÔ∏è",
            WeatherCondition.PartlyCloudy => "‚õÖ",
            WeatherCondition.Cloudy => "‚òÅÔ∏è",
            WeatherCondition.Rainy => "üåßÔ∏è",
            WeatherCondition.Stormy => "‚õàÔ∏è",
            WeatherCondition.Snowy => "‚ùÑÔ∏è",
            WeatherCondition.Foggy => "üå´Ô∏è",
            _ => "üå§Ô∏è"
        };
    }

    private string GetWeatherStatusBadge(WeatherInfo weather)
    {
        if (weather.Temperature >= temperatureRange.MinCelsius && weather.Temperature <= temperatureRange.MaxCelsius)
        {
            if (avoidRain && weather.Condition == WeatherCondition.Rainy)
                return "bg-warning";
            return "bg-success";
        }
        return "bg-danger";
    }

    private string GetWeatherStatus(WeatherInfo weather)
    {
        if (weather.Temperature >= temperatureRange.MinCelsius && weather.Temperature <= temperatureRange.MaxCelsius)
        {
            if (avoidRain && weather.Condition == WeatherCondition.Rainy)
                return "Rainy";
            return "Optimal";
        }
        return "Outside Range";
    }

    public class WaypointInput
    {
        public string Name { get; set; } = string.Empty;
        public double Latitude { get; set; }
        public double Longitude { get; set; }
    }    public class CityInfo
    {
        public string Name { get; set; } = string.Empty;
        public required Coordinate Coordinate { get; set; }
    }
}
