@page "/route-planner"
@using WeatherTraveler.Web.Services
@inject IWeatherTravelerService WeatherService
@inject NavigationManager Navigation

<PageTitle>Route Planner - Weather Traveler</PageTitle>

<div class="container">
    <div class="row">
        <div class="col-md-8 mx-auto">
            <h2 class="mb-4">üó∫Ô∏è Plan Your Route</h2>
            
            <div class="card">
                <div class="card-body">
                    <EditForm Model="@routeRequest" OnValidSubmit="@PlanRoute">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Origin</label>
                                    <InputText @bind-Value="routeRequest.Origin.Name" class="form-control" placeholder="Enter starting location" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Destination</label>
                                    <InputText @bind-Value="routeRequest.Destination.Name" class="form-control" placeholder="Enter destination" />
                                </div>
                            </div>
                        </div>
                        
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Departure Date</label>
                                    <InputDate @bind-Value="departureDate" class="form-control" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Departure Time</label>
                                    <InputText @bind-Value="departureTimeString" class="form-control" type="time" />
                                </div>
                            </div>
                        </div>
                        
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Min Temperature (¬∞C)</label>
                                    <InputNumber @bind-Value="routeRequest.TemperatureRange.MinTemperature" class="form-control" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Max Temperature (¬∞C)</label>
                                    <InputNumber @bind-Value="routeRequest.TemperatureRange.MaxTemperature" class="form-control" />
                                </div>
                            </div>
                        </div>
                        
                        <div class="mb-3">
                            <button type="submit" class="btn btn-primary" disabled="@isPlanning">
                                @if (isPlanning)
                                {
                                    <span class="spinner-border spinner-border-sm me-2"></span>
                                }
                                üéØ Plan Route
                            </button>
                            <button type="button" class="btn btn-secondary ms-2" @onclick="GoHome">
                                üè† Back to Home
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>

            @if (routeResult != null)
            {
                <div class="card mt-4">
                    <div class="card-body">
                        <h5 class="card-title">Route Results</h5>
                        <div class="row">
                            <div class="col-md-4">
                                <p><strong>Total Distance:</strong> @routeResult.TotalDistance.ToString("F1") km</p>
                            </div>
                            <div class="col-md-4">
                                <p><strong>Estimated Duration:</strong> @routeResult.EstimatedDuration.ToString(@"h\h\ m\m")</p>
                            </div>
                            <div class="col-md-4">
                                <p><strong>Status:</strong> @routeResult.Status</p>
                            </div>
                        </div>
                        
                        @if (routeResult.Segments.Any())
                        {
                            <h6 class="mt-3">Route Segments</h6>
                            <div class="table-responsive">
                                <table class="table table-sm">
                                    <thead>
                                        <tr>
                                            <th>From</th>
                                            <th>To</th>
                                            <th>Distance</th>
                                            <th>Duration</th>
                                            <th>Weather</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var segment in routeResult.Segments)
                                        {
                                            <tr>
                                                <td>@segment.From.Name</td>
                                                <td>@segment.To.Name</td>
                                                <td>@segment.Distance.ToString("F1") km</td>
                                                <td>@segment.Duration.ToString(@"h\h\ m\m")</td>
                                                <td>@segment.Weather.Temperature.ToString("F1")¬∞C, @segment.Weather.Condition</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private RouteRequest routeRequest = new()
    {
        Origin = new Location(),
        Destination = new Location(),
        DepartureTime = DateTime.Today.AddDays(1),
        TemperatureRange = new TemperatureRange { MinTemperature = 15, MaxTemperature = 25 }
    };

    private DateTime departureDate = DateTime.Today.AddDays(1);
    private string departureTimeString = "09:00";
    private RouteResult? routeResult;
    private bool isPlanning;

    private async Task PlanRoute()
    {
        isPlanning = true;
        
        try
        {
            // Combine date and time
            if (TimeSpan.TryParse(departureTimeString, out var time))
            {
                routeRequest.DepartureTime = departureDate.Date.Add(time);
            }
            else
            {
                routeRequest.DepartureTime = departureDate;
            }

            // Set some sample coordinates for now
            routeRequest.Origin.Latitude = 47.6062;
            routeRequest.Origin.Longitude = -122.3321;
            routeRequest.Destination.Latitude = 45.5152;
            routeRequest.Destination.Longitude = -122.6784;

            routeResult = await WeatherService.PlanRouteAsync(routeRequest);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error planning route: {ex.Message}");
        }
        finally
        {
            isPlanning = false;
        }
    }

    private void GoHome()
    {
        Navigation.NavigateTo("/");
    }
}